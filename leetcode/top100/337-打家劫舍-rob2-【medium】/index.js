/*
 * @Author: xxx
 * @Date: 2021-01-02 21:59:16
 * @LastEditors: xxx
 * @LastEditTime: 2021-01-02 23:05:59
 * @Description: 文件功能描述
 */
// 在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。

// 计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。

// 示例 1:

// 输入: [3,2,3,null,3,null,1]

//      3
//     / \
//    2   3
//     \   \ 
//      3   1

// 输出: 7 
// 解释: 小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = 7.
// 示例 2:

// 输入: [3,4,5,1,3,null,1]

//      3
//     / \
//    4   5
//   / \   \ 
//  1   3   1
//      0
//     / \
//    2   5
//   / \   \ 
//  4   3   1

// 输出: 9
// 解释: 小偷一晚能够盗取的最高金额 = 4 + 5 = 9.
// 思路，后续遍历，每个节点只有选与不选两种：【选，不选】，然后累加
var rob = function(root) {
    function dfs(root){
        if(!root){
            return [0,0]
        }
        let left = dfs(root.left)
        let right =  dfs(root.right)
       let dp = new Array(2)
        // dp[0]：以当前 node 为根结点的子树能够偷取的最大价值，规定 node 结点不偷
        // 当前节点不偷，那么子节点偷与不偷即可，不是下一层偷就一定最大，如下面，当前节点为0不偷，那么其左:偷只能为2，不偷可为4
               0
        //     / \
        //    2    3
        //   / \   
        //  4   3   
        dp[0] =  Math.max(left[0],left[1]) + Math.max(right[0],right[1])
        // dp[1]：以当前 node 为根结点的子树能够偷取的最大价值，规定 node 结点偷
        dp[1] =  root.val + left[0] + right[0]
        return dp
    }
    let dp = dfs(root)
    return Math.max(dp[0],dp[1])
};